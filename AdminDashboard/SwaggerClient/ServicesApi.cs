/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AdminDashboard.Models.SwaggerModels;
using AdminDashboard.SwaggerClientHelpers;

namespace AdminDashboard.SwaggerClient
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IServicesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>FeesResponseDTO</returns>
        FeesResponseDTO ApiServicesServiceIdFeesPost (int? serviceId, FeesRequestModel body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FeesResponseDTO</returns>
        ApiResponse<FeesResponseDTO> ApiServicesServiceIdFeesPostWithHttpInfo (int? serviceId, FeesRequestModel body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>InquiryResponseModel</returns>
        InquiryResponseModel ApiServicesServiceIdInquiryPost (int? serviceId, InquiryRequestModel body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InquiryResponseModel</returns>
        ApiResponse<InquiryResponseModel> ApiServicesServiceIdInquiryPostWithHttpInfo (int? serviceId, InquiryRequestModel body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>PaymentResponseDTO</returns>
        PaymentResponseDTO ApiServicesServiceIdPaymentPost (int? serviceId, PaymentRequestModel body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PaymentResponseDTO</returns>
        ApiResponse<PaymentResponseDTO> ApiServicesServiceIdPaymentPostWithHttpInfo (int? serviceId, PaymentRequestModel body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="transactionId"></param>
        /// <param name="accountId"></param>
        /// <returns>PaymentResponseDTO</returns>
        PaymentResponseDTO ApiServicesServiceIdTransactionIdAccountIdPaymentDelete (int? serviceId, int? transactionId, int? accountId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="transactionId"></param>
        /// <param name="accountId"></param>
        /// <returns>ApiResponse of PaymentResponseDTO</returns>
        ApiResponse<PaymentResponseDTO> ApiServicesServiceIdTransactionIdAccountIdPaymentDeleteWithHttpInfo (int? serviceId, int? transactionId, int? accountId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FeesResponseDTO</returns>
        System.Threading.Tasks.Task<FeesResponseDTO> ApiServicesServiceIdFeesPostAsync (int? serviceId, FeesRequestModel body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FeesResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<FeesResponseDTO>> ApiServicesServiceIdFeesPostAsyncWithHttpInfo (int? serviceId, FeesRequestModel body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InquiryResponseModel</returns>
        System.Threading.Tasks.Task<InquiryResponseModel> ApiServicesServiceIdInquiryPostAsync (int? serviceId, InquiryRequestModel body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InquiryResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<InquiryResponseModel>> ApiServicesServiceIdInquiryPostAsyncWithHttpInfo (int? serviceId, InquiryRequestModel body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PaymentResponseDTO</returns>
        System.Threading.Tasks.Task<PaymentResponseDTO> ApiServicesServiceIdPaymentPostAsync (int? serviceId, PaymentRequestModel body = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PaymentResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentResponseDTO>> ApiServicesServiceIdPaymentPostAsyncWithHttpInfo (int? serviceId, PaymentRequestModel body = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="transactionId"></param>
        /// <param name="accountId"></param>
        /// <returns>Task of PaymentResponseDTO</returns>
        System.Threading.Tasks.Task<PaymentResponseDTO> ApiServicesServiceIdTransactionIdAccountIdPaymentDeleteAsync (int? serviceId, int? transactionId, int? accountId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="transactionId"></param>
        /// <param name="accountId"></param>
        /// <returns>Task of ApiResponse (PaymentResponseDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentResponseDTO>> ApiServicesServiceIdTransactionIdAccountIdPaymentDeleteAsyncWithHttpInfo (int? serviceId, int? transactionId, int? accountId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ServicesApi : IServicesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ServicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ServicesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServicesApi"/> class
        /// </summary>
        /// <returns></returns>
        public ServicesApi()
        {
            this.Configuration = Configuration.Default;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ServicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ServicesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>FeesResponseDTO</returns>
        public FeesResponseDTO ApiServicesServiceIdFeesPost (int? serviceId, FeesRequestModel body = null)
        {
             ApiResponse<FeesResponseDTO> localVarResponse = ApiServicesServiceIdFeesPostWithHttpInfo(serviceId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of FeesResponseDTO</returns>
        public ApiResponse< FeesResponseDTO > ApiServicesServiceIdFeesPostWithHttpInfo (int? serviceId, FeesRequestModel body = null)
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling ServicesApi->ApiServicesServiceIdFeesPost");

            var localVarPath = "/api/Services/{serviceId}/fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceId != null) localVarPathParams.Add("serviceId", this.Configuration.ApiClient.ParameterToString(serviceId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesServiceIdFeesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeesResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FeesResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeesResponseDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of FeesResponseDTO</returns>
        public async System.Threading.Tasks.Task<FeesResponseDTO> ApiServicesServiceIdFeesPostAsync (int? serviceId, FeesRequestModel body = null)
        {
             ApiResponse<FeesResponseDTO> localVarResponse = await ApiServicesServiceIdFeesPostAsyncWithHttpInfo(serviceId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (FeesResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<FeesResponseDTO>> ApiServicesServiceIdFeesPostAsyncWithHttpInfo (int? serviceId, FeesRequestModel body = null)
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling ServicesApi->ApiServicesServiceIdFeesPost");

            var localVarPath = "/api/Services/{serviceId}/fees";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceId != null) localVarPathParams.Add("serviceId", this.Configuration.ApiClient.ParameterToString(serviceId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesServiceIdFeesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<FeesResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (FeesResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(FeesResponseDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>InquiryResponseModel</returns>
        public InquiryResponseModel ApiServicesServiceIdInquiryPost (int? serviceId, InquiryRequestModel body = null)
        {
             ApiResponse<InquiryResponseModel> localVarResponse = ApiServicesServiceIdInquiryPostWithHttpInfo(serviceId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of InquiryResponseModel</returns>
        public ApiResponse< InquiryResponseModel > ApiServicesServiceIdInquiryPostWithHttpInfo (int? serviceId, InquiryRequestModel body = null)
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling ServicesApi->ApiServicesServiceIdInquiryPost");

            var localVarPath = "/api/Services/{serviceId}/inquiry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceId != null) localVarPathParams.Add("serviceId", this.Configuration.ApiClient.ParameterToString(serviceId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesServiceIdInquiryPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InquiryResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InquiryResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InquiryResponseModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of InquiryResponseModel</returns>
        public async System.Threading.Tasks.Task<InquiryResponseModel> ApiServicesServiceIdInquiryPostAsync (int? serviceId, InquiryRequestModel body = null)
        {
             ApiResponse<InquiryResponseModel> localVarResponse = await ApiServicesServiceIdInquiryPostAsyncWithHttpInfo(serviceId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (InquiryResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InquiryResponseModel>> ApiServicesServiceIdInquiryPostAsyncWithHttpInfo (int? serviceId, InquiryRequestModel body = null)
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling ServicesApi->ApiServicesServiceIdInquiryPost");

            var localVarPath = "/api/Services/{serviceId}/inquiry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceId != null) localVarPathParams.Add("serviceId", this.Configuration.ApiClient.ParameterToString(serviceId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesServiceIdInquiryPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InquiryResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InquiryResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InquiryResponseModel)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>PaymentResponseDTO</returns>
        public PaymentResponseDTO ApiServicesServiceIdPaymentPost (int? serviceId, PaymentRequestModel body = null)
        {
             ApiResponse<PaymentResponseDTO> localVarResponse = ApiServicesServiceIdPaymentPostWithHttpInfo(serviceId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of PaymentResponseDTO</returns>
        public ApiResponse< PaymentResponseDTO > ApiServicesServiceIdPaymentPostWithHttpInfo (int? serviceId, PaymentRequestModel body = null)
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling ServicesApi->ApiServicesServiceIdPaymentPost");

            var localVarPath = "/api/Services/{serviceId}/payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceId != null) localVarPathParams.Add("serviceId", this.Configuration.ApiClient.ParameterToString(serviceId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesServiceIdPaymentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentResponseDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of PaymentResponseDTO</returns>
        public async System.Threading.Tasks.Task<PaymentResponseDTO> ApiServicesServiceIdPaymentPostAsync (int? serviceId, PaymentRequestModel body = null)
        {
             ApiResponse<PaymentResponseDTO> localVarResponse = await ApiServicesServiceIdPaymentPostAsyncWithHttpInfo(serviceId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (PaymentResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentResponseDTO>> ApiServicesServiceIdPaymentPostAsyncWithHttpInfo (int? serviceId, PaymentRequestModel body = null)
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling ServicesApi->ApiServicesServiceIdPaymentPost");

            var localVarPath = "/api/Services/{serviceId}/payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceId != null) localVarPathParams.Add("serviceId", this.Configuration.ApiClient.ParameterToString(serviceId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesServiceIdPaymentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentResponseDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="transactionId"></param>
        /// <param name="accountId"></param>
        /// <returns>PaymentResponseDTO</returns>
        public PaymentResponseDTO ApiServicesServiceIdTransactionIdAccountIdPaymentDelete (int? serviceId, int? transactionId, int? accountId)
        {
             ApiResponse<PaymentResponseDTO> localVarResponse = ApiServicesServiceIdTransactionIdAccountIdPaymentDeleteWithHttpInfo(serviceId, transactionId, accountId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="transactionId"></param>
        /// <param name="accountId"></param>
        /// <returns>ApiResponse of PaymentResponseDTO</returns>
        public ApiResponse< PaymentResponseDTO > ApiServicesServiceIdTransactionIdAccountIdPaymentDeleteWithHttpInfo (int? serviceId, int? transactionId, int? accountId)
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling ServicesApi->ApiServicesServiceIdTransactionIdAccountIdPaymentDelete");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling ServicesApi->ApiServicesServiceIdTransactionIdAccountIdPaymentDelete");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ServicesApi->ApiServicesServiceIdTransactionIdAccountIdPaymentDelete");

            var localVarPath = "/api/Services/{serviceId}/{transactionId}/{accountId}/payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceId != null) localVarPathParams.Add("serviceId", this.Configuration.ApiClient.ParameterToString(serviceId)); // path parameter
            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesServiceIdTransactionIdAccountIdPaymentDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentResponseDTO)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="transactionId"></param>
        /// <param name="accountId"></param>
        /// <returns>Task of PaymentResponseDTO</returns>
        public async System.Threading.Tasks.Task<PaymentResponseDTO> ApiServicesServiceIdTransactionIdAccountIdPaymentDeleteAsync (int? serviceId, int? transactionId, int? accountId)
        {
             ApiResponse<PaymentResponseDTO> localVarResponse = await ApiServicesServiceIdTransactionIdAccountIdPaymentDeleteAsyncWithHttpInfo(serviceId, transactionId, accountId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="serviceId"></param>
        /// <param name="transactionId"></param>
        /// <param name="accountId"></param>
        /// <returns>Task of ApiResponse (PaymentResponseDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PaymentResponseDTO>> ApiServicesServiceIdTransactionIdAccountIdPaymentDeleteAsyncWithHttpInfo (int? serviceId, int? transactionId, int? accountId)
        {
            // verify the required parameter 'serviceId' is set
            if (serviceId == null)
                throw new ApiException(400, "Missing required parameter 'serviceId' when calling ServicesApi->ApiServicesServiceIdTransactionIdAccountIdPaymentDelete");
            // verify the required parameter 'transactionId' is set
            if (transactionId == null)
                throw new ApiException(400, "Missing required parameter 'transactionId' when calling ServicesApi->ApiServicesServiceIdTransactionIdAccountIdPaymentDelete");
            // verify the required parameter 'accountId' is set
            if (accountId == null)
                throw new ApiException(400, "Missing required parameter 'accountId' when calling ServicesApi->ApiServicesServiceIdTransactionIdAccountIdPaymentDelete");

            var localVarPath = "/api/Services/{serviceId}/{transactionId}/{accountId}/payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serviceId != null) localVarPathParams.Add("serviceId", this.Configuration.ApiClient.ParameterToString(serviceId)); // path parameter
            if (transactionId != null) localVarPathParams.Add("transactionId", this.Configuration.ApiClient.ParameterToString(transactionId)); // path parameter
            if (accountId != null) localVarPathParams.Add("accountId", this.Configuration.ApiClient.ParameterToString(accountId)); // path parameter
            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiServicesServiceIdTransactionIdAccountIdPaymentDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PaymentResponseDTO>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PaymentResponseDTO) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PaymentResponseDTO)));
        }

    }
}
