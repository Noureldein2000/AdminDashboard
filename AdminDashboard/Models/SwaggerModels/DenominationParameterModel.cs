/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AdminDashboard.SwaggerClientHelpers.SwaggerDateConverter;

namespace AdminDashboard.Models.SwaggerModels
{
    /// <summary>
    /// DenominationParameterModel
    /// </summary>
    [DataContract]
        public partial class DenominationParameterModel :  IEquatable<DenominationParameterModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DenominationParameterModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="denominationID">denominationID.</param>
        /// <param name="sequence">sequence.</param>
        /// <param name="optional">optional.</param>
        /// <param name="denominationParamID">denominationParamID.</param>
        /// <param name="value">value.</param>
        /// <param name="valueList">valueList.</param>
        /// <param name="validationExpression">validationExpression.</param>
        /// <param name="validationMessage">validationMessage.</param>
        public DenominationParameterModel(int? id = default(int?), int? denominationID = default(int?), int? sequence = default(int?), bool? optional = default(bool?), int? denominationParamID = default(int?), string value = default(string), string valueList = default(string), string validationExpression = default(string), string validationMessage = default(string))
        {
            this.Id = id;
            this.DenominationID = denominationID;
            this.Sequence = sequence;
            this.Optional = optional;
            this.DenominationParamID = denominationParamID;
            this.Value = value;
            this.ValueList = valueList;
            this.ValidationExpression = validationExpression;
            this.ValidationMessage = validationMessage;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets DenominationID
        /// </summary>
        [DataMember(Name="denominationID", EmitDefaultValue=false)]
        public int? DenominationID { get; set; }

        /// <summary>
        /// Gets or Sets Sequence
        /// </summary>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public int? Sequence { get; set; }

        /// <summary>
        /// Gets or Sets Optional
        /// </summary>
        [DataMember(Name="optional", EmitDefaultValue=false)]
        public bool? Optional { get; set; }

        /// <summary>
        /// Gets or Sets DenominationParamID
        /// </summary>
        [DataMember(Name="denominationParamID", EmitDefaultValue=false)]
        public int? DenominationParamID { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets ValueList
        /// </summary>
        [DataMember(Name="valueList", EmitDefaultValue=false)]
        public string ValueList { get; set; }

        /// <summary>
        /// Gets or Sets ValidationExpression
        /// </summary>
        [DataMember(Name="validationExpression", EmitDefaultValue=false)]
        public string ValidationExpression { get; set; }

        /// <summary>
        /// Gets or Sets ValidationMessage
        /// </summary>
        [DataMember(Name="validationMessage", EmitDefaultValue=false)]
        public string ValidationMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DenominationParameterModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DenominationID: ").Append(DenominationID).Append("\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  Optional: ").Append(Optional).Append("\n");
            sb.Append("  DenominationParamID: ").Append(DenominationParamID).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ValueList: ").Append(ValueList).Append("\n");
            sb.Append("  ValidationExpression: ").Append(ValidationExpression).Append("\n");
            sb.Append("  ValidationMessage: ").Append(ValidationMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DenominationParameterModel);
        }

        /// <summary>
        /// Returns true if DenominationParameterModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DenominationParameterModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DenominationParameterModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DenominationID == input.DenominationID ||
                    (this.DenominationID != null &&
                    this.DenominationID.Equals(input.DenominationID))
                ) && 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && 
                (
                    this.Optional == input.Optional ||
                    (this.Optional != null &&
                    this.Optional.Equals(input.Optional))
                ) && 
                (
                    this.DenominationParamID == input.DenominationParamID ||
                    (this.DenominationParamID != null &&
                    this.DenominationParamID.Equals(input.DenominationParamID))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.ValueList == input.ValueList ||
                    (this.ValueList != null &&
                    this.ValueList.Equals(input.ValueList))
                ) && 
                (
                    this.ValidationExpression == input.ValidationExpression ||
                    (this.ValidationExpression != null &&
                    this.ValidationExpression.Equals(input.ValidationExpression))
                ) && 
                (
                    this.ValidationMessage == input.ValidationMessage ||
                    (this.ValidationMessage != null &&
                    this.ValidationMessage.Equals(input.ValidationMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DenominationID != null)
                    hashCode = hashCode * 59 + this.DenominationID.GetHashCode();
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                if (this.Optional != null)
                    hashCode = hashCode * 59 + this.Optional.GetHashCode();
                if (this.DenominationParamID != null)
                    hashCode = hashCode * 59 + this.DenominationParamID.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.ValueList != null)
                    hashCode = hashCode * 59 + this.ValueList.GetHashCode();
                if (this.ValidationExpression != null)
                    hashCode = hashCode * 59 + this.ValidationExpression.GetHashCode();
                if (this.ValidationMessage != null)
                    hashCode = hashCode * 59 + this.ValidationMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
