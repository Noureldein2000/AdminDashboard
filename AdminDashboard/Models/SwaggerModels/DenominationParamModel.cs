/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AdminDashboard.SwaggerClientHelpers.SwaggerDateConverter;

namespace AdminDashboard.Models.SwaggerModels
{
    /// <summary>
    /// DenominationParamModel
    /// </summary>
    [DataContract]
        public partial class DenominationParamModel :  IEquatable<DenominationParamModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DenominationParamModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="label">label.</param>
        /// <param name="title">title.</param>
        /// <param name="paramKey">paramKey.</param>
        /// <param name="valueModeID">valueModeID.</param>
        /// <param name="valueModeName">valueModeName.</param>
        /// <param name="valueTypeID">valueTypeID.</param>
        /// <param name="valueTypeName">valueTypeName.</param>
        public DenominationParamModel(int? id = default(int?), string label = default(string), string title = default(string), string paramKey = default(string), int? valueModeID = default(int?), string valueModeName = default(string), int? valueTypeID = default(int?), string valueTypeName = default(string))
        {
            this.Id = id;
            this.Label = label;
            this.Title = title;
            this.ParamKey = paramKey;
            this.ValueModeID = valueModeID;
            this.ValueModeName = valueModeName;
            this.ValueTypeID = valueTypeID;
            this.ValueTypeName = valueTypeName;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets ParamKey
        /// </summary>
        [DataMember(Name="paramKey", EmitDefaultValue=false)]
        public string ParamKey { get; set; }

        /// <summary>
        /// Gets or Sets ValueModeID
        /// </summary>
        [DataMember(Name="valueModeID", EmitDefaultValue=false)]
        public int? ValueModeID { get; set; }

        /// <summary>
        /// Gets or Sets ValueModeName
        /// </summary>
        [DataMember(Name="valueModeName", EmitDefaultValue=false)]
        public string ValueModeName { get; set; }

        /// <summary>
        /// Gets or Sets ValueTypeID
        /// </summary>
        [DataMember(Name="valueTypeID", EmitDefaultValue=false)]
        public int? ValueTypeID { get; set; }

        /// <summary>
        /// Gets or Sets ValueTypeName
        /// </summary>
        [DataMember(Name="valueTypeName", EmitDefaultValue=false)]
        public string ValueTypeName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DenominationParamModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  ParamKey: ").Append(ParamKey).Append("\n");
            sb.Append("  ValueModeID: ").Append(ValueModeID).Append("\n");
            sb.Append("  ValueModeName: ").Append(ValueModeName).Append("\n");
            sb.Append("  ValueTypeID: ").Append(ValueTypeID).Append("\n");
            sb.Append("  ValueTypeName: ").Append(ValueTypeName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DenominationParamModel);
        }

        /// <summary>
        /// Returns true if DenominationParamModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DenominationParamModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DenominationParamModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.ParamKey == input.ParamKey ||
                    (this.ParamKey != null &&
                    this.ParamKey.Equals(input.ParamKey))
                ) && 
                (
                    this.ValueModeID == input.ValueModeID ||
                    (this.ValueModeID != null &&
                    this.ValueModeID.Equals(input.ValueModeID))
                ) && 
                (
                    this.ValueModeName == input.ValueModeName ||
                    (this.ValueModeName != null &&
                    this.ValueModeName.Equals(input.ValueModeName))
                ) && 
                (
                    this.ValueTypeID == input.ValueTypeID ||
                    (this.ValueTypeID != null &&
                    this.ValueTypeID.Equals(input.ValueTypeID))
                ) && 
                (
                    this.ValueTypeName == input.ValueTypeName ||
                    (this.ValueTypeName != null &&
                    this.ValueTypeName.Equals(input.ValueTypeName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.ParamKey != null)
                    hashCode = hashCode * 59 + this.ParamKey.GetHashCode();
                if (this.ValueModeID != null)
                    hashCode = hashCode * 59 + this.ValueModeID.GetHashCode();
                if (this.ValueModeName != null)
                    hashCode = hashCode * 59 + this.ValueModeName.GetHashCode();
                if (this.ValueTypeID != null)
                    hashCode = hashCode * 59 + this.ValueTypeID.GetHashCode();
                if (this.ValueTypeName != null)
                    hashCode = hashCode * 59 + this.ValueTypeName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
