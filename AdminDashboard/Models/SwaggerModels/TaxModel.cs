/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AdminDashboard.SwaggerClientHelpers.SwaggerDateConverter;

namespace AdminDashboard.Models.SwaggerModels
{
    /// <summary>
    /// TaxModel
    /// </summary>
    [DataContract]
        public partial class TaxModel :  IEquatable<TaxModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaxModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="taxesTypeID">taxesTypeID.</param>
        /// <param name="taxesTypeName">taxesTypeName.</param>
        /// <param name="taxRange">taxRange.</param>
        /// <param name="taxes">taxes.</param>
        /// <param name="amountFrom">amountFrom.</param>
        /// <param name="amountTo">amountTo.</param>
        /// <param name="paymentModeID">paymentModeID.</param>
        /// <param name="createdBy">createdBy.</param>
        /// <param name="paymentModeName">paymentModeName.</param>
        /// <param name="value">value.</param>
        /// <param name="status">status.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="endDate">endDate.</param>
        public TaxModel(int? id = default(int?), int? taxesTypeID = default(int?), string taxesTypeName = default(string), string taxRange = default(string), double? taxes = default(double?), double? amountFrom = default(double?), double? amountTo = default(double?), int? paymentModeID = default(int?), int? createdBy = default(int?), string paymentModeName = default(string), double? value = default(double?), bool? status = default(bool?), DateTime? startDate = default(DateTime?), DateTime? endDate = default(DateTime?))
        {
            this.Id = id;
            this.TaxesTypeID = taxesTypeID;
            this.TaxesTypeName = taxesTypeName;
            this.TaxRange = taxRange;
            this.Taxes = taxes;
            this.AmountFrom = amountFrom;
            this.AmountTo = amountTo;
            this.PaymentModeID = paymentModeID;
            this.CreatedBy = createdBy;
            this.PaymentModeName = paymentModeName;
            this.Value = value;
            this.Status = status;
            this.StartDate = startDate;
            this.EndDate = endDate;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets TaxesTypeID
        /// </summary>
        [DataMember(Name="taxesTypeID", EmitDefaultValue=false)]
        public int? TaxesTypeID { get; set; }

        /// <summary>
        /// Gets or Sets TaxesTypeName
        /// </summary>
        [DataMember(Name="taxesTypeName", EmitDefaultValue=false)]
        public string TaxesTypeName { get; set; }

        /// <summary>
        /// Gets or Sets TaxRange
        /// </summary>
        [DataMember(Name="taxRange", EmitDefaultValue=false)]
        public string TaxRange { get; set; }

        /// <summary>
        /// Gets or Sets Taxes
        /// </summary>
        [DataMember(Name="taxes", EmitDefaultValue=false)]
        public double? Taxes { get; set; }

        /// <summary>
        /// Gets or Sets AmountFrom
        /// </summary>
        [DataMember(Name="amountFrom", EmitDefaultValue=false)]
        public double? AmountFrom { get; set; }

        /// <summary>
        /// Gets or Sets AmountTo
        /// </summary>
        [DataMember(Name="amountTo", EmitDefaultValue=false)]
        public double? AmountTo { get; set; }

        /// <summary>
        /// Gets or Sets PaymentModeID
        /// </summary>
        [DataMember(Name="paymentModeID", EmitDefaultValue=false)]
        public int? PaymentModeID { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public int? CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets PaymentModeName
        /// </summary>
        [DataMember(Name="paymentModeName", EmitDefaultValue=false)]
        public string PaymentModeName { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public double? Value { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public bool? Status { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaxModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TaxesTypeID: ").Append(TaxesTypeID).Append("\n");
            sb.Append("  TaxesTypeName: ").Append(TaxesTypeName).Append("\n");
            sb.Append("  TaxRange: ").Append(TaxRange).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("  AmountFrom: ").Append(AmountFrom).Append("\n");
            sb.Append("  AmountTo: ").Append(AmountTo).Append("\n");
            sb.Append("  PaymentModeID: ").Append(PaymentModeID).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  PaymentModeName: ").Append(PaymentModeName).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaxModel);
        }

        /// <summary>
        /// Returns true if TaxModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TaxModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaxModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.TaxesTypeID == input.TaxesTypeID ||
                    (this.TaxesTypeID != null &&
                    this.TaxesTypeID.Equals(input.TaxesTypeID))
                ) && 
                (
                    this.TaxesTypeName == input.TaxesTypeName ||
                    (this.TaxesTypeName != null &&
                    this.TaxesTypeName.Equals(input.TaxesTypeName))
                ) && 
                (
                    this.TaxRange == input.TaxRange ||
                    (this.TaxRange != null &&
                    this.TaxRange.Equals(input.TaxRange))
                ) && 
                (
                    this.Taxes == input.Taxes ||
                    (this.Taxes != null &&
                    this.Taxes.Equals(input.Taxes))
                ) && 
                (
                    this.AmountFrom == input.AmountFrom ||
                    (this.AmountFrom != null &&
                    this.AmountFrom.Equals(input.AmountFrom))
                ) && 
                (
                    this.AmountTo == input.AmountTo ||
                    (this.AmountTo != null &&
                    this.AmountTo.Equals(input.AmountTo))
                ) && 
                (
                    this.PaymentModeID == input.PaymentModeID ||
                    (this.PaymentModeID != null &&
                    this.PaymentModeID.Equals(input.PaymentModeID))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.PaymentModeName == input.PaymentModeName ||
                    (this.PaymentModeName != null &&
                    this.PaymentModeName.Equals(input.PaymentModeName))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.EndDate == input.EndDate ||
                    (this.EndDate != null &&
                    this.EndDate.Equals(input.EndDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.TaxesTypeID != null)
                    hashCode = hashCode * 59 + this.TaxesTypeID.GetHashCode();
                if (this.TaxesTypeName != null)
                    hashCode = hashCode * 59 + this.TaxesTypeName.GetHashCode();
                if (this.TaxRange != null)
                    hashCode = hashCode * 59 + this.TaxRange.GetHashCode();
                if (this.Taxes != null)
                    hashCode = hashCode * 59 + this.Taxes.GetHashCode();
                if (this.AmountFrom != null)
                    hashCode = hashCode * 59 + this.AmountFrom.GetHashCode();
                if (this.AmountTo != null)
                    hashCode = hashCode * 59 + this.AmountTo.GetHashCode();
                if (this.PaymentModeID != null)
                    hashCode = hashCode * 59 + this.PaymentModeID.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.PaymentModeName != null)
                    hashCode = hashCode * 59 + this.PaymentModeName.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hashCode = hashCode * 59 + this.EndDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
