/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AdminDashboard.SwaggerClientHelpers.SwaggerDateConverter;

namespace AdminDashboard.Models.SwaggerModels
{
    /// <summary>
    /// LookupTypeModel
    /// </summary>
    [DataContract]
        public partial class LookupTypeModel :  IEquatable<LookupTypeModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LookupTypeModel" /> class.
        /// </summary>
        /// <param name="fees">fees.</param>
        /// <param name="commissions">commissions.</param>
        /// <param name="taxes">taxes.</param>
        public LookupTypeModel(List<GeneralLookupTypeModel> fees = default(List<GeneralLookupTypeModel>), List<GeneralLookupTypeModel> commissions = default(List<GeneralLookupTypeModel>), List<GeneralLookupTypeModel> taxes = default(List<GeneralLookupTypeModel>))
        {
            this.Fees = fees;
            this.Commissions = commissions;
            this.Taxes = taxes;
        }
        
        /// <summary>
        /// Gets or Sets Fees
        /// </summary>
        [DataMember(Name="fees", EmitDefaultValue=false)]
        public List<GeneralLookupTypeModel> Fees { get; set; }

        /// <summary>
        /// Gets or Sets Commissions
        /// </summary>
        [DataMember(Name="commissions", EmitDefaultValue=false)]
        public List<GeneralLookupTypeModel> Commissions { get; set; }

        /// <summary>
        /// Gets or Sets Taxes
        /// </summary>
        [DataMember(Name="taxes", EmitDefaultValue=false)]
        public List<GeneralLookupTypeModel> Taxes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LookupTypeModel {\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  Commissions: ").Append(Commissions).Append("\n");
            sb.Append("  Taxes: ").Append(Taxes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LookupTypeModel);
        }

        /// <summary>
        /// Returns true if LookupTypeModel instances are equal
        /// </summary>
        /// <param name="input">Instance of LookupTypeModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LookupTypeModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Fees == input.Fees ||
                    this.Fees != null &&
                    input.Fees != null &&
                    this.Fees.SequenceEqual(input.Fees)
                ) && 
                (
                    this.Commissions == input.Commissions ||
                    this.Commissions != null &&
                    input.Commissions != null &&
                    this.Commissions.SequenceEqual(input.Commissions)
                ) && 
                (
                    this.Taxes == input.Taxes ||
                    this.Taxes != null &&
                    input.Taxes != null &&
                    this.Taxes.SequenceEqual(input.Taxes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Fees != null)
                    hashCode = hashCode * 59 + this.Fees.GetHashCode();
                if (this.Commissions != null)
                    hashCode = hashCode * 59 + this.Commissions.GetHashCode();
                if (this.Taxes != null)
                    hashCode = hashCode * 59 + this.Taxes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
