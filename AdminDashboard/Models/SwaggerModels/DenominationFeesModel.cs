/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AdminDashboard.SwaggerClientHelpers.SwaggerDateConverter;

namespace AdminDashboard.Models.SwaggerModels
{
    /// <summary>
    /// DenominationFeesModel
    /// </summary>
    [DataContract]
        public partial class DenominationFeesModel :  IEquatable<DenominationFeesModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DenominationFeesModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="feesId">feesId.</param>
        /// <param name="feesValue">feesValue.</param>
        /// <param name="paymentModeId">paymentModeId.</param>
        /// <param name="paymentMode">paymentMode.</param>
        /// <param name="feesTypeId">feesTypeId.</param>
        /// <param name="feesTypeName">feesTypeName.</param>
        /// <param name="denominationId">denominationId.</param>
        /// <param name="range">range.</param>
        /// <param name="creationDate">creationDate.</param>
        public DenominationFeesModel(int? id = default(int?), int? feesId = default(int?), double? feesValue = default(double?), int? paymentModeId = default(int?), string paymentMode = default(string), int? feesTypeId = default(int?), string feesTypeName = default(string), int? denominationId = default(int?), string range = default(string), DateTime? creationDate = default(DateTime?))
        {
            this.Id = id;
            this.FeesId = feesId;
            this.FeesValue = feesValue;
            this.PaymentModeId = paymentModeId;
            this.PaymentMode = paymentMode;
            this.FeesTypeId = feesTypeId;
            this.FeesTypeName = feesTypeName;
            this.DenominationId = denominationId;
            this.Range = range;
            this.CreationDate = creationDate;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets FeesId
        /// </summary>
        [DataMember(Name="feesId", EmitDefaultValue=false)]
        public int? FeesId { get; set; }

        /// <summary>
        /// Gets or Sets FeesValue
        /// </summary>
        [DataMember(Name="feesValue", EmitDefaultValue=false)]
        public double? FeesValue { get; set; }

        /// <summary>
        /// Gets or Sets PaymentModeId
        /// </summary>
        [DataMember(Name="paymentModeId", EmitDefaultValue=false)]
        public int? PaymentModeId { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMode
        /// </summary>
        [DataMember(Name="paymentMode", EmitDefaultValue=false)]
        public string PaymentMode { get; set; }

        /// <summary>
        /// Gets or Sets FeesTypeId
        /// </summary>
        [DataMember(Name="feesTypeId", EmitDefaultValue=false)]
        public int? FeesTypeId { get; set; }

        /// <summary>
        /// Gets or Sets FeesTypeName
        /// </summary>
        [DataMember(Name="feesTypeName", EmitDefaultValue=false)]
        public string FeesTypeName { get; set; }

        /// <summary>
        /// Gets or Sets DenominationId
        /// </summary>
        [DataMember(Name="denominationId", EmitDefaultValue=false)]
        public int? DenominationId { get; set; }

        /// <summary>
        /// Gets or Sets Range
        /// </summary>
        [DataMember(Name="range", EmitDefaultValue=false)]
        public string Range { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DenominationFeesModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FeesId: ").Append(FeesId).Append("\n");
            sb.Append("  FeesValue: ").Append(FeesValue).Append("\n");
            sb.Append("  PaymentModeId: ").Append(PaymentModeId).Append("\n");
            sb.Append("  PaymentMode: ").Append(PaymentMode).Append("\n");
            sb.Append("  FeesTypeId: ").Append(FeesTypeId).Append("\n");
            sb.Append("  FeesTypeName: ").Append(FeesTypeName).Append("\n");
            sb.Append("  DenominationId: ").Append(DenominationId).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DenominationFeesModel);
        }

        /// <summary>
        /// Returns true if DenominationFeesModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DenominationFeesModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DenominationFeesModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FeesId == input.FeesId ||
                    (this.FeesId != null &&
                    this.FeesId.Equals(input.FeesId))
                ) && 
                (
                    this.FeesValue == input.FeesValue ||
                    (this.FeesValue != null &&
                    this.FeesValue.Equals(input.FeesValue))
                ) && 
                (
                    this.PaymentModeId == input.PaymentModeId ||
                    (this.PaymentModeId != null &&
                    this.PaymentModeId.Equals(input.PaymentModeId))
                ) && 
                (
                    this.PaymentMode == input.PaymentMode ||
                    (this.PaymentMode != null &&
                    this.PaymentMode.Equals(input.PaymentMode))
                ) && 
                (
                    this.FeesTypeId == input.FeesTypeId ||
                    (this.FeesTypeId != null &&
                    this.FeesTypeId.Equals(input.FeesTypeId))
                ) && 
                (
                    this.FeesTypeName == input.FeesTypeName ||
                    (this.FeesTypeName != null &&
                    this.FeesTypeName.Equals(input.FeesTypeName))
                ) && 
                (
                    this.DenominationId == input.DenominationId ||
                    (this.DenominationId != null &&
                    this.DenominationId.Equals(input.DenominationId))
                ) && 
                (
                    this.Range == input.Range ||
                    (this.Range != null &&
                    this.Range.Equals(input.Range))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FeesId != null)
                    hashCode = hashCode * 59 + this.FeesId.GetHashCode();
                if (this.FeesValue != null)
                    hashCode = hashCode * 59 + this.FeesValue.GetHashCode();
                if (this.PaymentModeId != null)
                    hashCode = hashCode * 59 + this.PaymentModeId.GetHashCode();
                if (this.PaymentMode != null)
                    hashCode = hashCode * 59 + this.PaymentMode.GetHashCode();
                if (this.FeesTypeId != null)
                    hashCode = hashCode * 59 + this.FeesTypeId.GetHashCode();
                if (this.FeesTypeName != null)
                    hashCode = hashCode * 59 + this.FeesTypeName.GetHashCode();
                if (this.DenominationId != null)
                    hashCode = hashCode * 59 + this.DenominationId.GetHashCode();
                if (this.Range != null)
                    hashCode = hashCode * 59 + this.Range.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
