/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AdminDashboard.SwaggerClientHelpers.SwaggerDateConverter;

namespace AdminDashboard.Models.SwaggerModels
{
    /// <summary>
    /// AccountTypeProfileFeesModel
    /// </summary>
    [DataContract]
        public partial class AccountTypeProfileFeesModel :  IEquatable<AccountTypeProfileFeesModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountTypeProfileFeesModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="feesID">feesID.</param>
        /// <param name="accountTypeProfileDenominationID">accountTypeProfileDenominationID.</param>
        /// <param name="serviceName">serviceName.</param>
        /// <param name="denomintionName">denomintionName.</param>
        /// <param name="accountTypeName">accountTypeName.</param>
        /// <param name="profileName">profileName.</param>
        /// <param name="feesValue">feesValue.</param>
        /// <param name="amountFrom">amountFrom.</param>
        /// <param name="amountTo">amountTo.</param>
        /// <param name="paymentModeName">paymentModeName.</param>
        /// <param name="feesTypeName">feesTypeName.</param>
        public AccountTypeProfileFeesModel(int? id = default(int?), int? feesID = default(int?), int? accountTypeProfileDenominationID = default(int?), string serviceName = default(string), string denomintionName = default(string), string accountTypeName = default(string), string profileName = default(string), double? feesValue = default(double?), double? amountFrom = default(double?), double? amountTo = default(double?), string paymentModeName = default(string), string feesTypeName = default(string))
        {
            this.Id = id;
            this.FeesID = feesID;
            this.AccountTypeProfileDenominationID = accountTypeProfileDenominationID;
            this.ServiceName = serviceName;
            this.DenomintionName = denomintionName;
            this.AccountTypeName = accountTypeName;
            this.ProfileName = profileName;
            this.FeesValue = feesValue;
            this.AmountFrom = amountFrom;
            this.AmountTo = amountTo;
            this.PaymentModeName = paymentModeName;
            this.FeesTypeName = feesTypeName;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets FeesID
        /// </summary>
        [DataMember(Name="feesID", EmitDefaultValue=false)]
        public int? FeesID { get; set; }

        /// <summary>
        /// Gets or Sets AccountTypeProfileDenominationID
        /// </summary>
        [DataMember(Name="accountTypeProfileDenominationID", EmitDefaultValue=false)]
        public int? AccountTypeProfileDenominationID { get; set; }

        /// <summary>
        /// Gets or Sets ServiceName
        /// </summary>
        [DataMember(Name="serviceName", EmitDefaultValue=false)]
        public string ServiceName { get; set; }

        /// <summary>
        /// Gets or Sets DenomintionName
        /// </summary>
        [DataMember(Name="denomintionName", EmitDefaultValue=false)]
        public string DenomintionName { get; set; }

        /// <summary>
        /// Gets or Sets AccountTypeName
        /// </summary>
        [DataMember(Name="accountTypeName", EmitDefaultValue=false)]
        public string AccountTypeName { get; set; }

        /// <summary>
        /// Gets or Sets ProfileName
        /// </summary>
        [DataMember(Name="profileName", EmitDefaultValue=false)]
        public string ProfileName { get; set; }

        /// <summary>
        /// Gets or Sets FeesValue
        /// </summary>
        [DataMember(Name="feesValue", EmitDefaultValue=false)]
        public double? FeesValue { get; set; }

        /// <summary>
        /// Gets or Sets AmountFrom
        /// </summary>
        [DataMember(Name="amountFrom", EmitDefaultValue=false)]
        public double? AmountFrom { get; set; }

        /// <summary>
        /// Gets or Sets AmountTo
        /// </summary>
        [DataMember(Name="amountTo", EmitDefaultValue=false)]
        public double? AmountTo { get; set; }

        /// <summary>
        /// Gets or Sets PaymentModeName
        /// </summary>
        [DataMember(Name="paymentModeName", EmitDefaultValue=false)]
        public string PaymentModeName { get; set; }

        /// <summary>
        /// Gets or Sets FeesTypeName
        /// </summary>
        [DataMember(Name="feesTypeName", EmitDefaultValue=false)]
        public string FeesTypeName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountTypeProfileFeesModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  FeesID: ").Append(FeesID).Append("\n");
            sb.Append("  AccountTypeProfileDenominationID: ").Append(AccountTypeProfileDenominationID).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  DenomintionName: ").Append(DenomintionName).Append("\n");
            sb.Append("  AccountTypeName: ").Append(AccountTypeName).Append("\n");
            sb.Append("  ProfileName: ").Append(ProfileName).Append("\n");
            sb.Append("  FeesValue: ").Append(FeesValue).Append("\n");
            sb.Append("  AmountFrom: ").Append(AmountFrom).Append("\n");
            sb.Append("  AmountTo: ").Append(AmountTo).Append("\n");
            sb.Append("  PaymentModeName: ").Append(PaymentModeName).Append("\n");
            sb.Append("  FeesTypeName: ").Append(FeesTypeName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountTypeProfileFeesModel);
        }

        /// <summary>
        /// Returns true if AccountTypeProfileFeesModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountTypeProfileFeesModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountTypeProfileFeesModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.FeesID == input.FeesID ||
                    (this.FeesID != null &&
                    this.FeesID.Equals(input.FeesID))
                ) && 
                (
                    this.AccountTypeProfileDenominationID == input.AccountTypeProfileDenominationID ||
                    (this.AccountTypeProfileDenominationID != null &&
                    this.AccountTypeProfileDenominationID.Equals(input.AccountTypeProfileDenominationID))
                ) && 
                (
                    this.ServiceName == input.ServiceName ||
                    (this.ServiceName != null &&
                    this.ServiceName.Equals(input.ServiceName))
                ) && 
                (
                    this.DenomintionName == input.DenomintionName ||
                    (this.DenomintionName != null &&
                    this.DenomintionName.Equals(input.DenomintionName))
                ) && 
                (
                    this.AccountTypeName == input.AccountTypeName ||
                    (this.AccountTypeName != null &&
                    this.AccountTypeName.Equals(input.AccountTypeName))
                ) && 
                (
                    this.ProfileName == input.ProfileName ||
                    (this.ProfileName != null &&
                    this.ProfileName.Equals(input.ProfileName))
                ) && 
                (
                    this.FeesValue == input.FeesValue ||
                    (this.FeesValue != null &&
                    this.FeesValue.Equals(input.FeesValue))
                ) && 
                (
                    this.AmountFrom == input.AmountFrom ||
                    (this.AmountFrom != null &&
                    this.AmountFrom.Equals(input.AmountFrom))
                ) && 
                (
                    this.AmountTo == input.AmountTo ||
                    (this.AmountTo != null &&
                    this.AmountTo.Equals(input.AmountTo))
                ) && 
                (
                    this.PaymentModeName == input.PaymentModeName ||
                    (this.PaymentModeName != null &&
                    this.PaymentModeName.Equals(input.PaymentModeName))
                ) && 
                (
                    this.FeesTypeName == input.FeesTypeName ||
                    (this.FeesTypeName != null &&
                    this.FeesTypeName.Equals(input.FeesTypeName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.FeesID != null)
                    hashCode = hashCode * 59 + this.FeesID.GetHashCode();
                if (this.AccountTypeProfileDenominationID != null)
                    hashCode = hashCode * 59 + this.AccountTypeProfileDenominationID.GetHashCode();
                if (this.ServiceName != null)
                    hashCode = hashCode * 59 + this.ServiceName.GetHashCode();
                if (this.DenomintionName != null)
                    hashCode = hashCode * 59 + this.DenomintionName.GetHashCode();
                if (this.AccountTypeName != null)
                    hashCode = hashCode * 59 + this.AccountTypeName.GetHashCode();
                if (this.ProfileName != null)
                    hashCode = hashCode * 59 + this.ProfileName.GetHashCode();
                if (this.FeesValue != null)
                    hashCode = hashCode * 59 + this.FeesValue.GetHashCode();
                if (this.AmountFrom != null)
                    hashCode = hashCode * 59 + this.AmountFrom.GetHashCode();
                if (this.AmountTo != null)
                    hashCode = hashCode * 59 + this.AmountTo.GetHashCode();
                if (this.PaymentModeName != null)
                    hashCode = hashCode * 59 + this.PaymentModeName.GetHashCode();
                if (this.FeesTypeName != null)
                    hashCode = hashCode * 59 + this.FeesTypeName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
