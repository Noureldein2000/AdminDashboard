/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AdminDashboard.SwaggerClientHelpers.SwaggerDateConverter;

namespace AdminDashboard.Models.SwaggerModels
{
    /// <summary>
    /// RolePermissionsModel
    /// </summary>
    [DataContract]
        public partial class RolePermissionsModel :  IEquatable<RolePermissionsModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RolePermissionsModel" /> class.
        /// </summary>
        /// <param name="roleId">roleId.</param>
        /// <param name="roleName">roleName.</param>
        /// <param name="roleClaims">roleClaims.</param>
        public RolePermissionsModel(string roleId = default(string), string roleName = default(string), List<CheckBoxModel> roleClaims = default(List<CheckBoxModel>))
        {
            this.RoleId = roleId;
            this.RoleName = roleName;
            this.RoleClaims = roleClaims;
        }
        
        /// <summary>
        /// Gets or Sets RoleId
        /// </summary>
        [DataMember(Name="roleId", EmitDefaultValue=false)]
        public string RoleId { get; set; }

        /// <summary>
        /// Gets or Sets RoleName
        /// </summary>
        [DataMember(Name="roleName", EmitDefaultValue=false)]
        public string RoleName { get; set; }

        /// <summary>
        /// Gets or Sets RoleClaims
        /// </summary>
        [DataMember(Name="roleClaims", EmitDefaultValue=false)]
        public List<CheckBoxModel> RoleClaims { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RolePermissionsModel {\n");
            sb.Append("  RoleId: ").Append(RoleId).Append("\n");
            sb.Append("  RoleName: ").Append(RoleName).Append("\n");
            sb.Append("  RoleClaims: ").Append(RoleClaims).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RolePermissionsModel);
        }

        /// <summary>
        /// Returns true if RolePermissionsModel instances are equal
        /// </summary>
        /// <param name="input">Instance of RolePermissionsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RolePermissionsModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RoleId == input.RoleId ||
                    (this.RoleId != null &&
                    this.RoleId.Equals(input.RoleId))
                ) && 
                (
                    this.RoleName == input.RoleName ||
                    (this.RoleName != null &&
                    this.RoleName.Equals(input.RoleName))
                ) && 
                (
                    this.RoleClaims == input.RoleClaims ||
                    this.RoleClaims != null &&
                    input.RoleClaims != null &&
                    this.RoleClaims.SequenceEqual(input.RoleClaims)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RoleId != null)
                    hashCode = hashCode * 59 + this.RoleId.GetHashCode();
                if (this.RoleName != null)
                    hashCode = hashCode * 59 + this.RoleName.GetHashCode();
                if (this.RoleClaims != null)
                    hashCode = hashCode * 59 + this.RoleClaims.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
