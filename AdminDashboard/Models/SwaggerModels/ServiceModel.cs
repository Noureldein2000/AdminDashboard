/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AdminDashboard.SwaggerClientHelpers.SwaggerDateConverter;

namespace AdminDashboard.Models.SwaggerModels
{
    /// <summary>
    /// ServiceModel
    /// </summary>
    [DataContract]
        public partial class ServiceModel :  IEquatable<ServiceModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="arName">arName.</param>
        /// <param name="serviceTypeID">serviceTypeID.</param>
        /// <param name="code">code.</param>
        /// <param name="serviceEntityID">serviceEntityID.</param>
        /// <param name="pathClass">pathClass.</param>
        public ServiceModel(int? id = default(int?), string name = default(string), string arName = default(string), int? serviceTypeID = default(int?), string code = default(string), int? serviceEntityID = default(int?), string pathClass = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.ArName = arName;
            this.ServiceTypeID = serviceTypeID;
            this.Code = code;
            this.ServiceEntityID = serviceEntityID;
            this.PathClass = pathClass;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ArName
        /// </summary>
        [DataMember(Name="arName", EmitDefaultValue=false)]
        public string ArName { get; set; }

        /// <summary>
        /// Gets or Sets ServiceTypeID
        /// </summary>
        [DataMember(Name="serviceTypeID", EmitDefaultValue=false)]
        public int? ServiceTypeID { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets ServiceEntityID
        /// </summary>
        [DataMember(Name="serviceEntityID", EmitDefaultValue=false)]
        public int? ServiceEntityID { get; set; }

        /// <summary>
        /// Gets or Sets PathClass
        /// </summary>
        [DataMember(Name="pathClass", EmitDefaultValue=false)]
        public string PathClass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ArName: ").Append(ArName).Append("\n");
            sb.Append("  ServiceTypeID: ").Append(ServiceTypeID).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  ServiceEntityID: ").Append(ServiceEntityID).Append("\n");
            sb.Append("  PathClass: ").Append(PathClass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceModel);
        }

        /// <summary>
        /// Returns true if ServiceModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ArName == input.ArName ||
                    (this.ArName != null &&
                    this.ArName.Equals(input.ArName))
                ) && 
                (
                    this.ServiceTypeID == input.ServiceTypeID ||
                    (this.ServiceTypeID != null &&
                    this.ServiceTypeID.Equals(input.ServiceTypeID))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.ServiceEntityID == input.ServiceEntityID ||
                    (this.ServiceEntityID != null &&
                    this.ServiceEntityID.Equals(input.ServiceEntityID))
                ) && 
                (
                    this.PathClass == input.PathClass ||
                    (this.PathClass != null &&
                    this.PathClass.Equals(input.PathClass))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ArName != null)
                    hashCode = hashCode * 59 + this.ArName.GetHashCode();
                if (this.ServiceTypeID != null)
                    hashCode = hashCode * 59 + this.ServiceTypeID.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.ServiceEntityID != null)
                    hashCode = hashCode * 59 + this.ServiceEntityID.GetHashCode();
                if (this.PathClass != null)
                    hashCode = hashCode * 59 + this.PathClass.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
