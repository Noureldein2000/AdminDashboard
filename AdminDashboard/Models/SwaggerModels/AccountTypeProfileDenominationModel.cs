/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AdminDashboard.SwaggerClientHelpers.SwaggerDateConverter;

namespace AdminDashboard.Models.SwaggerModels
{
    /// <summary>
    /// AccountTypeProfileDenominationModel
    /// </summary>
    [DataContract]
        public partial class AccountTypeProfileDenominationModel :  IEquatable<AccountTypeProfileDenominationModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountTypeProfileDenominationModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="accountTypeProfileID">accountTypeProfileID.</param>
        /// <param name="denominationID">denominationID.</param>
        /// <param name="denominationName">denominationName.</param>
        /// <param name="accountTypeName">accountTypeName.</param>
        /// <param name="profileName">profileName.</param>
        /// <param name="status">status.</param>
        public AccountTypeProfileDenominationModel(int? id = default(int?), int? accountTypeProfileID = default(int?), int? denominationID = default(int?), string denominationName = default(string), string accountTypeName = default(string), string profileName = default(string), bool? status = default(bool?))
        {
            this.Id = id;
            this.AccountTypeProfileID = accountTypeProfileID;
            this.DenominationID = denominationID;
            this.DenominationName = denominationName;
            this.AccountTypeName = accountTypeName;
            this.ProfileName = profileName;
            this.Status = status;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets AccountTypeProfileID
        /// </summary>
        [DataMember(Name="accountTypeProfileID", EmitDefaultValue=false)]
        public int? AccountTypeProfileID { get; set; }

        /// <summary>
        /// Gets or Sets DenominationID
        /// </summary>
        [DataMember(Name="denominationID", EmitDefaultValue=false)]
        public int? DenominationID { get; set; }

        /// <summary>
        /// Gets or Sets DenominationName
        /// </summary>
        [DataMember(Name="denominationName", EmitDefaultValue=false)]
        public string DenominationName { get; set; }

        /// <summary>
        /// Gets or Sets AccountTypeName
        /// </summary>
        [DataMember(Name="accountTypeName", EmitDefaultValue=false)]
        public string AccountTypeName { get; set; }

        /// <summary>
        /// Gets or Sets ProfileName
        /// </summary>
        [DataMember(Name="profileName", EmitDefaultValue=false)]
        public string ProfileName { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public bool? Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountTypeProfileDenominationModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AccountTypeProfileID: ").Append(AccountTypeProfileID).Append("\n");
            sb.Append("  DenominationID: ").Append(DenominationID).Append("\n");
            sb.Append("  DenominationName: ").Append(DenominationName).Append("\n");
            sb.Append("  AccountTypeName: ").Append(AccountTypeName).Append("\n");
            sb.Append("  ProfileName: ").Append(ProfileName).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountTypeProfileDenominationModel);
        }

        /// <summary>
        /// Returns true if AccountTypeProfileDenominationModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountTypeProfileDenominationModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountTypeProfileDenominationModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.AccountTypeProfileID == input.AccountTypeProfileID ||
                    (this.AccountTypeProfileID != null &&
                    this.AccountTypeProfileID.Equals(input.AccountTypeProfileID))
                ) && 
                (
                    this.DenominationID == input.DenominationID ||
                    (this.DenominationID != null &&
                    this.DenominationID.Equals(input.DenominationID))
                ) && 
                (
                    this.DenominationName == input.DenominationName ||
                    (this.DenominationName != null &&
                    this.DenominationName.Equals(input.DenominationName))
                ) && 
                (
                    this.AccountTypeName == input.AccountTypeName ||
                    (this.AccountTypeName != null &&
                    this.AccountTypeName.Equals(input.AccountTypeName))
                ) && 
                (
                    this.ProfileName == input.ProfileName ||
                    (this.ProfileName != null &&
                    this.ProfileName.Equals(input.ProfileName))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AccountTypeProfileID != null)
                    hashCode = hashCode * 59 + this.AccountTypeProfileID.GetHashCode();
                if (this.DenominationID != null)
                    hashCode = hashCode * 59 + this.DenominationID.GetHashCode();
                if (this.DenominationName != null)
                    hashCode = hashCode * 59 + this.DenominationName.GetHashCode();
                if (this.AccountTypeName != null)
                    hashCode = hashCode * 59 + this.AccountTypeName.GetHashCode();
                if (this.ProfileName != null)
                    hashCode = hashCode * 59 + this.ProfileName.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
