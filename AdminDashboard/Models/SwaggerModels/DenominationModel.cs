/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AdminDashboard.SwaggerClientHelpers.SwaggerDateConverter;

namespace AdminDashboard.Models.SwaggerModels
{
    /// <summary>
    /// DenominationModel
    /// </summary>
    [DataContract]
        public partial class DenominationModel :  IEquatable<DenominationModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DenominationModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="value">value.</param>
        /// <param name="serviceID">serviceID.</param>
        /// <param name="oldDenominationID">oldDenominationID.</param>
        /// <param name="status">status.</param>
        /// <param name="serviceCategoryID">serviceCategoryID.</param>
        /// <param name="serviceProviderId">serviceProviderId.</param>
        /// <param name="serviceEntity">serviceEntity.</param>
        /// <param name="paymentModeID">paymentModeID.</param>
        public DenominationModel(int? id = default(int?), string name = default(string), double? value = default(double?), int? serviceID = default(int?), string oldDenominationID = default(string), bool? status = default(bool?), int? serviceCategoryID = default(int?), int? serviceProviderId = default(int?), string serviceEntity = default(string), int? paymentModeID = default(int?))
        {
            this.Id = id;
            this.Name = name;
            this.Value = value;
            this.ServiceID = serviceID;
            this.OldDenominationID = oldDenominationID;
            this.Status = status;
            this.ServiceCategoryID = serviceCategoryID;
            this.ServiceProviderId = serviceProviderId;
            this.ServiceEntity = serviceEntity;
            this.PaymentModeID = paymentModeID;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public double? Value { get; set; }

        /// <summary>
        /// Gets or Sets ServiceID
        /// </summary>
        [DataMember(Name="serviceID", EmitDefaultValue=false)]
        public int? ServiceID { get; set; }

        /// <summary>
        /// Gets or Sets OldDenominationID
        /// </summary>
        [DataMember(Name="oldDenominationID", EmitDefaultValue=false)]
        public string OldDenominationID { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public bool? Status { get; set; }

        /// <summary>
        /// Gets or Sets ServiceCategoryID
        /// </summary>
        [DataMember(Name="serviceCategoryID", EmitDefaultValue=false)]
        public int? ServiceCategoryID { get; set; }

        /// <summary>
        /// Gets or Sets ServiceProviderId
        /// </summary>
        [DataMember(Name="serviceProviderId", EmitDefaultValue=false)]
        public int? ServiceProviderId { get; set; }

        /// <summary>
        /// Gets or Sets ServiceEntity
        /// </summary>
        [DataMember(Name="serviceEntity", EmitDefaultValue=false)]
        public string ServiceEntity { get; set; }

        /// <summary>
        /// Gets or Sets PaymentModeID
        /// </summary>
        [DataMember(Name="paymentModeID", EmitDefaultValue=false)]
        public int? PaymentModeID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DenominationModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ServiceID: ").Append(ServiceID).Append("\n");
            sb.Append("  OldDenominationID: ").Append(OldDenominationID).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ServiceCategoryID: ").Append(ServiceCategoryID).Append("\n");
            sb.Append("  ServiceProviderId: ").Append(ServiceProviderId).Append("\n");
            sb.Append("  ServiceEntity: ").Append(ServiceEntity).Append("\n");
            sb.Append("  PaymentModeID: ").Append(PaymentModeID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DenominationModel);
        }

        /// <summary>
        /// Returns true if DenominationModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DenominationModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DenominationModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.ServiceID == input.ServiceID ||
                    (this.ServiceID != null &&
                    this.ServiceID.Equals(input.ServiceID))
                ) && 
                (
                    this.OldDenominationID == input.OldDenominationID ||
                    (this.OldDenominationID != null &&
                    this.OldDenominationID.Equals(input.OldDenominationID))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ServiceCategoryID == input.ServiceCategoryID ||
                    (this.ServiceCategoryID != null &&
                    this.ServiceCategoryID.Equals(input.ServiceCategoryID))
                ) && 
                (
                    this.ServiceProviderId == input.ServiceProviderId ||
                    (this.ServiceProviderId != null &&
                    this.ServiceProviderId.Equals(input.ServiceProviderId))
                ) && 
                (
                    this.ServiceEntity == input.ServiceEntity ||
                    (this.ServiceEntity != null &&
                    this.ServiceEntity.Equals(input.ServiceEntity))
                ) && 
                (
                    this.PaymentModeID == input.PaymentModeID ||
                    (this.PaymentModeID != null &&
                    this.PaymentModeID.Equals(input.PaymentModeID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.ServiceID != null)
                    hashCode = hashCode * 59 + this.ServiceID.GetHashCode();
                if (this.OldDenominationID != null)
                    hashCode = hashCode * 59 + this.OldDenominationID.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ServiceCategoryID != null)
                    hashCode = hashCode * 59 + this.ServiceCategoryID.GetHashCode();
                if (this.ServiceProviderId != null)
                    hashCode = hashCode * 59 + this.ServiceProviderId.GetHashCode();
                if (this.ServiceEntity != null)
                    hashCode = hashCode * 59 + this.ServiceEntity.GetHashCode();
                if (this.PaymentModeID != null)
                    hashCode = hashCode * 59 + this.PaymentModeID.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
