/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AdminDashboard.SwaggerClientHelpers.SwaggerDateConverter;

namespace AdminDashboard.Models.SwaggerModels
{
    /// <summary>
    /// AddDenominationModel
    /// </summary>
    [DataContract]
        public partial class AddDenominationModel :  IEquatable<AddDenominationModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddDenominationModel" /> class.
        /// </summary>
        /// <param name="denomination">denomination.</param>
        /// <param name="denominationServiceProviders">denominationServiceProviders.</param>
        /// <param name="denominationProviderConfigeration">denominationProviderConfigeration.</param>
        /// <param name="serviceConfigeration">serviceConfigeration.</param>
        /// <param name="serviceConfigParms">serviceConfigParms.</param>
        public AddDenominationModel(DenominationModel denomination = default(DenominationModel), DenominationServiceProvidersModel denominationServiceProviders = default(DenominationServiceProvidersModel), DenominationProviderConfigerationModel denominationProviderConfigeration = default(DenominationProviderConfigerationModel), ServiceConfigerationModel serviceConfigeration = default(ServiceConfigerationModel), ServiceConfigParmsModel serviceConfigParms = default(ServiceConfigParmsModel))
        {
            this.Denomination = denomination;
            this.DenominationServiceProviders = denominationServiceProviders;
            this.DenominationProviderConfigeration = denominationProviderConfigeration;
            this.ServiceConfigeration = serviceConfigeration;
            this.ServiceConfigParms = serviceConfigParms;
        }
        
        /// <summary>
        /// Gets or Sets Denomination
        /// </summary>
        [DataMember(Name="denomination", EmitDefaultValue=false)]
        public DenominationModel Denomination { get; set; }

        /// <summary>
        /// Gets or Sets DenominationServiceProviders
        /// </summary>
        [DataMember(Name="denominationServiceProviders", EmitDefaultValue=false)]
        public DenominationServiceProvidersModel DenominationServiceProviders { get; set; }

        /// <summary>
        /// Gets or Sets DenominationProviderConfigeration
        /// </summary>
        [DataMember(Name="denominationProviderConfigeration", EmitDefaultValue=false)]
        public DenominationProviderConfigerationModel DenominationProviderConfigeration { get; set; }

        /// <summary>
        /// Gets or Sets ServiceConfigeration
        /// </summary>
        [DataMember(Name="serviceConfigeration", EmitDefaultValue=false)]
        public ServiceConfigerationModel ServiceConfigeration { get; set; }

        /// <summary>
        /// Gets or Sets ServiceConfigParms
        /// </summary>
        [DataMember(Name="serviceConfigParms", EmitDefaultValue=false)]
        public ServiceConfigParmsModel ServiceConfigParms { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddDenominationModel {\n");
            sb.Append("  Denomination: ").Append(Denomination).Append("\n");
            sb.Append("  DenominationServiceProviders: ").Append(DenominationServiceProviders).Append("\n");
            sb.Append("  DenominationProviderConfigeration: ").Append(DenominationProviderConfigeration).Append("\n");
            sb.Append("  ServiceConfigeration: ").Append(ServiceConfigeration).Append("\n");
            sb.Append("  ServiceConfigParms: ").Append(ServiceConfigParms).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddDenominationModel);
        }

        /// <summary>
        /// Returns true if AddDenominationModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AddDenominationModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddDenominationModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Denomination == input.Denomination ||
                    (this.Denomination != null &&
                    this.Denomination.Equals(input.Denomination))
                ) && 
                (
                    this.DenominationServiceProviders == input.DenominationServiceProviders ||
                    (this.DenominationServiceProviders != null &&
                    this.DenominationServiceProviders.Equals(input.DenominationServiceProviders))
                ) && 
                (
                    this.DenominationProviderConfigeration == input.DenominationProviderConfigeration ||
                    (this.DenominationProviderConfigeration != null &&
                    this.DenominationProviderConfigeration.Equals(input.DenominationProviderConfigeration))
                ) && 
                (
                    this.ServiceConfigeration == input.ServiceConfigeration ||
                    (this.ServiceConfigeration != null &&
                    this.ServiceConfigeration.Equals(input.ServiceConfigeration))
                ) && 
                (
                    this.ServiceConfigParms == input.ServiceConfigParms ||
                    (this.ServiceConfigParms != null &&
                    this.ServiceConfigParms.Equals(input.ServiceConfigParms))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Denomination != null)
                    hashCode = hashCode * 59 + this.Denomination.GetHashCode();
                if (this.DenominationServiceProviders != null)
                    hashCode = hashCode * 59 + this.DenominationServiceProviders.GetHashCode();
                if (this.DenominationProviderConfigeration != null)
                    hashCode = hashCode * 59 + this.DenominationProviderConfigeration.GetHashCode();
                if (this.ServiceConfigeration != null)
                    hashCode = hashCode * 59 + this.ServiceConfigeration.GetHashCode();
                if (this.ServiceConfigParms != null)
                    hashCode = hashCode * 59 + this.ServiceConfigParms.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
