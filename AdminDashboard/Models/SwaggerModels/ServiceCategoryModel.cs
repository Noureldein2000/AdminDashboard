/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AdminDashboard.SwaggerClientHelpers.SwaggerDateConverter;

namespace AdminDashboard.Models.SwaggerModels
{
    /// <summary>
    /// ServiceCategoryModel
    /// </summary>
    [DataContract]
        public partial class ServiceCategoryModel :  IEquatable<ServiceCategoryModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceCategoryModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="arName">arName.</param>
        /// <param name="lastNode">lastNode.</param>
        /// <param name="serviceIndex">serviceIndex.</param>
        /// <param name="serviceLevel">serviceLevel.</param>
        /// <param name="serviceSubCategory">serviceSubCategory.</param>
        /// <param name="title">title.</param>
        /// <param name="parentID">parentID.</param>
        /// <param name="creationDate">creationDate.</param>
        public ServiceCategoryModel(int? id = default(int?), string name = default(string), string arName = default(string), bool? lastNode = default(bool?), int? serviceIndex = default(int?), int? serviceLevel = default(int?), string serviceSubCategory = default(string), string title = default(string), int? parentID = default(int?), DateTime? creationDate = default(DateTime?))
        {
            this.Id = id;
            this.Name = name;
            this.ArName = arName;
            this.LastNode = lastNode;
            this.ServiceIndex = serviceIndex;
            this.ServiceLevel = serviceLevel;
            this.ServiceSubCategory = serviceSubCategory;
            this.Title = title;
            this.ParentID = parentID;
            this.CreationDate = creationDate;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ArName
        /// </summary>
        [DataMember(Name="arName", EmitDefaultValue=false)]
        public string ArName { get; set; }

        /// <summary>
        /// Gets or Sets LastNode
        /// </summary>
        [DataMember(Name="lastNode", EmitDefaultValue=false)]
        public bool? LastNode { get; set; }

        /// <summary>
        /// Gets or Sets ServiceIndex
        /// </summary>
        [DataMember(Name="serviceIndex", EmitDefaultValue=false)]
        public int? ServiceIndex { get; set; }

        /// <summary>
        /// Gets or Sets ServiceLevel
        /// </summary>
        [DataMember(Name="serviceLevel", EmitDefaultValue=false)]
        public int? ServiceLevel { get; set; }

        /// <summary>
        /// Gets or Sets ServiceSubCategory
        /// </summary>
        [DataMember(Name="serviceSubCategory", EmitDefaultValue=false)]
        public string ServiceSubCategory { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets ParentID
        /// </summary>
        [DataMember(Name="parentID", EmitDefaultValue=false)]
        public int? ParentID { get; set; }

        /// <summary>
        /// Gets or Sets CreationDate
        /// </summary>
        [DataMember(Name="creationDate", EmitDefaultValue=false)]
        public DateTime? CreationDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceCategoryModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ArName: ").Append(ArName).Append("\n");
            sb.Append("  LastNode: ").Append(LastNode).Append("\n");
            sb.Append("  ServiceIndex: ").Append(ServiceIndex).Append("\n");
            sb.Append("  ServiceLevel: ").Append(ServiceLevel).Append("\n");
            sb.Append("  ServiceSubCategory: ").Append(ServiceSubCategory).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  ParentID: ").Append(ParentID).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServiceCategoryModel);
        }

        /// <summary>
        /// Returns true if ServiceCategoryModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ServiceCategoryModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceCategoryModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ArName == input.ArName ||
                    (this.ArName != null &&
                    this.ArName.Equals(input.ArName))
                ) && 
                (
                    this.LastNode == input.LastNode ||
                    (this.LastNode != null &&
                    this.LastNode.Equals(input.LastNode))
                ) && 
                (
                    this.ServiceIndex == input.ServiceIndex ||
                    (this.ServiceIndex != null &&
                    this.ServiceIndex.Equals(input.ServiceIndex))
                ) && 
                (
                    this.ServiceLevel == input.ServiceLevel ||
                    (this.ServiceLevel != null &&
                    this.ServiceLevel.Equals(input.ServiceLevel))
                ) && 
                (
                    this.ServiceSubCategory == input.ServiceSubCategory ||
                    (this.ServiceSubCategory != null &&
                    this.ServiceSubCategory.Equals(input.ServiceSubCategory))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.ParentID == input.ParentID ||
                    (this.ParentID != null &&
                    this.ParentID.Equals(input.ParentID))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ArName != null)
                    hashCode = hashCode * 59 + this.ArName.GetHashCode();
                if (this.LastNode != null)
                    hashCode = hashCode * 59 + this.LastNode.GetHashCode();
                if (this.ServiceIndex != null)
                    hashCode = hashCode * 59 + this.ServiceIndex.GetHashCode();
                if (this.ServiceLevel != null)
                    hashCode = hashCode * 59 + this.ServiceLevel.GetHashCode();
                if (this.ServiceSubCategory != null)
                    hashCode = hashCode * 59 + this.ServiceSubCategory.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.ParentID != null)
                    hashCode = hashCode * 59 + this.ParentID.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
