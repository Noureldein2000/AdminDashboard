/* 
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AdminDashboard.SwaggerClientHelpers.SwaggerDateConverter;

namespace AdminDashboard.Models.SwaggerModels
{
    /// <summary>
    /// DenominationReceiptParamModel
    /// </summary>
    [DataContract]
        public partial class DenominationReceiptParamModel :  IEquatable<DenominationReceiptParamModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DenominationReceiptParamModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="denominationID">denominationID.</param>
        /// <param name="parameterID">parameterID.</param>
        /// <param name="parameterName">parameterName.</param>
        /// <param name="bold">bold.</param>
        /// <param name="alignment">alignment.</param>
        /// <param name="status">status.</param>
        /// <param name="fontSize">fontSize.</param>
        public DenominationReceiptParamModel(int? id = default(int?), int? denominationID = default(int?), int? parameterID = default(int?), string parameterName = default(string), bool? bold = default(bool?), int? alignment = default(int?), bool? status = default(bool?), FontSize fontSize = default(FontSize))
        {
            this.Id = id;
            this.DenominationID = denominationID;
            this.ParameterID = parameterID;
            this.ParameterName = parameterName;
            this.Bold = bold;
            this.Alignment = alignment;
            this.Status = status;
            this.FontSize = fontSize;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets DenominationID
        /// </summary>
        [DataMember(Name="denominationID", EmitDefaultValue=false)]
        public int? DenominationID { get; set; }

        /// <summary>
        /// Gets or Sets ParameterID
        /// </summary>
        [DataMember(Name="parameterID", EmitDefaultValue=false)]
        public int? ParameterID { get; set; }

        /// <summary>
        /// Gets or Sets ParameterName
        /// </summary>
        [DataMember(Name="parameterName", EmitDefaultValue=false)]
        public string ParameterName { get; set; }

        /// <summary>
        /// Gets or Sets Bold
        /// </summary>
        [DataMember(Name="bold", EmitDefaultValue=false)]
        public bool? Bold { get; set; }

        /// <summary>
        /// Gets or Sets Alignment
        /// </summary>
        [DataMember(Name="alignment", EmitDefaultValue=false)]
        public int? Alignment { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public bool? Status { get; set; }

        /// <summary>
        /// Gets or Sets FontSize
        /// </summary>
        [DataMember(Name="fontSize", EmitDefaultValue=false)]
        public FontSize FontSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DenominationReceiptParamModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DenominationID: ").Append(DenominationID).Append("\n");
            sb.Append("  ParameterID: ").Append(ParameterID).Append("\n");
            sb.Append("  ParameterName: ").Append(ParameterName).Append("\n");
            sb.Append("  Bold: ").Append(Bold).Append("\n");
            sb.Append("  Alignment: ").Append(Alignment).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  FontSize: ").Append(FontSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DenominationReceiptParamModel);
        }

        /// <summary>
        /// Returns true if DenominationReceiptParamModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DenominationReceiptParamModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DenominationReceiptParamModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DenominationID == input.DenominationID ||
                    (this.DenominationID != null &&
                    this.DenominationID.Equals(input.DenominationID))
                ) && 
                (
                    this.ParameterID == input.ParameterID ||
                    (this.ParameterID != null &&
                    this.ParameterID.Equals(input.ParameterID))
                ) && 
                (
                    this.ParameterName == input.ParameterName ||
                    (this.ParameterName != null &&
                    this.ParameterName.Equals(input.ParameterName))
                ) && 
                (
                    this.Bold == input.Bold ||
                    (this.Bold != null &&
                    this.Bold.Equals(input.Bold))
                ) && 
                (
                    this.Alignment == input.Alignment ||
                    (this.Alignment != null &&
                    this.Alignment.Equals(input.Alignment))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.FontSize == input.FontSize ||
                    (this.FontSize != null &&
                    this.FontSize.Equals(input.FontSize))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DenominationID != null)
                    hashCode = hashCode * 59 + this.DenominationID.GetHashCode();
                if (this.ParameterID != null)
                    hashCode = hashCode * 59 + this.ParameterID.GetHashCode();
                if (this.ParameterName != null)
                    hashCode = hashCode * 59 + this.ParameterName.GetHashCode();
                if (this.Bold != null)
                    hashCode = hashCode * 59 + this.Bold.GetHashCode();
                if (this.Alignment != null)
                    hashCode = hashCode * 59 + this.Alignment.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.FontSize != null)
                    hashCode = hashCode * 59 + this.FontSize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
